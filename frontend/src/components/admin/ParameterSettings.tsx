import React, { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { Container, Row, Col, Card, Button, Form, Alert, Spinner } from 'react-bootstrap';
import { parameterService } from '../../services';
import { usePermissions } from '../../hooks/useAuth';
import { ParameterUpdateRequest } from '../../models';

interface ParameterSettingsProps {
    readOnly?: boolean;
}

export const ParameterSettings: React.FC<ParameterSettingsProps> = ({ readOnly = false }) => {
    const { canViewAdmin } = usePermissions();
    if (!canViewAdmin) {
        return (
            <Container className="py-5">
                <Row className="justify-content-center">
                    <Col md={8}>
                        <Alert variant="danger" className="text-center">
                            <Alert.Heading>T·ª´ ch·ªëi truy c·∫≠p</Alert.Heading>
                            <p>B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p qu·∫£n l√Ω quy ƒë·ªãnh h·ªá th·ªëng.</p>
                        </Alert>
                    </Col>
                </Row>
            </Container>
        );
    }

    const [loading, setLoading] = useState(false);
    const [saving, setSaving] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState('');

    const {
        register,
        handleSubmit,
        reset,
        formState: { errors }
    } = useForm<ParameterUpdateRequest>();

    // Load parameters on component mount
    useEffect(() => {
        loadParameters();
    }, []);

    const loadParameters = async () => {
        setLoading(true);
        setError(null);
        try {
            const dataArr = await parameterService.getAllParameters();
            const data = Array.isArray(dataArr) ? dataArr[0] : dataArr;
            reset(data);
        } catch (err: any) {
            console.error('Error loading parameters at 2025-06-11 09:12:40 UTC by thinh0704hcm:', err);
            setError('Kh√¥ng th·ªÉ t·∫£i quy ƒë·ªãnh h·ªá th·ªëng');
        } finally {
            setLoading(false);
        }
    };

    const onSubmit = async (data: ParameterUpdateRequest) => {
        try {
            setSaving(true);
            setError('');
            setSuccess('');

            console.log('Updating parameters at 2025-06-11 09:12:40 UTC by thinh0704hcm');
            await parameterService.updateParameters(data);

            setSuccess('C·∫≠p nh·∫≠t quy ƒë·ªãnh th√†nh c√¥ng!');
            loadParameters();
        } catch (err: any) {
            console.error('Error updating parameters at 2025-06-11 09:12:40 UTC by thinh0704hcm:', err);
            setError(err.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t quy ƒë·ªãnh');
        } finally {
            setSaving(false);
        }
    };

    if (loading) {
        return (
            <Container className="py-5">
                <Row className="justify-content-center">
                    <Col md={8} className="text-center">
                        <Spinner animation="border" role="status">
                            <span className="visually-hidden">ƒêang t·∫£i...</span>
                        </Spinner>
                        <p className="mt-3">ƒêang t·∫£i quy ƒë·ªãnh h·ªá th·ªëng...</p>
                    </Col>
                </Row>
            </Container>
        );
    }

    return (
        <Container className="py-4" style={{ maxWidth: '800px' }}>
            <Card className="mb-4">
                <Card.Header className="text-center bg-primary text-white">
                    <Card.Title as="h2" className="mb-2">
                        <i className="bi bi-gear-fill me-2"></i>
                        {readOnly ? 'Xem quy ƒë·ªãnh h·ªá th·ªëng' : 'Thay ƒë·ªïi quy ƒë·ªãnh h·ªá th·ªëng'}
                    </Card.Title>
                </Card.Header>
            </Card>

            {error && (
                <Alert variant="danger" className="mb-4">
                    <Alert.Heading>L·ªói</Alert.Heading>
                    {error}
                </Alert>
            )}

            {success && !readOnly && (
                <Alert variant="success" className="mb-4">
                    <Alert.Heading>Th√†nh c√¥ng</Alert.Heading>
                    {success}
                </Alert>
            )}

            {readOnly && (
                <Alert variant="info" className="mb-4">
                    <Alert.Heading>Ch·∫ø ƒë·ªô ch·ªâ xem</Alert.Heading>
                    B·∫°n ƒëang xem quy ƒë·ªãnh h·ªá th·ªëng. Kh√¥ng th·ªÉ ch·ªânh s·ª≠a trong ch·∫ø ƒë·ªô n√†y.
                </Alert>
            )}

            <Card>
                <Card.Body className="p-4">
                    <Form onSubmit={readOnly ? (e) => e.preventDefault() : handleSubmit(onSubmit)}>
                        {/* Flight Constraints Section */}
                        <div className="mb-5 pb-4 border-bottom">
                            <h5 className="text-primary mb-4">
                                <span className="me-2">‚úàÔ∏è</span>
                                Quy ƒë·ªãnh v·ªÅ chuy·∫øn bay
                            </h5>

                            <Row className="g-4">
                                <Col md={6}>
                                    <Form.Group>
                                        <Form.Label className="fw-bold">S·ªë s√¢n bay trung gian t·ªëi ƒëa</Form.Label>
                                        <Form.Control
                                            type="number"
                                            min="0"
                                            max="10"
                                            readOnly={readOnly}
                                            disabled={readOnly}
                                            {...register('maxMediumAirport', {
                                                required: !readOnly && 'S·ªë s√¢n bay trung gian t·ªëi ƒëa l√† b·∫Øt bu·ªôc',
                                                min: { value: 0, message: 'Gi√° tr·ªã ph·∫£i √≠t nh·∫•t l√† 0' },
                                                max: { value: 10, message: 'Gi√° tr·ªã ph·∫£i nhi·ªÅu nh·∫•t l√† 10' },
                                                valueAsNumber: true
                                            })}
                                            isInvalid={!readOnly && !!errors.maxMediumAirport}
                                        />
                                        {!readOnly && (
                                            <Form.Control.Feedback type="invalid">
                                                {errors.maxMediumAirport?.message}
                                            </Form.Control.Feedback>
                                        )}
                                        <Form.Text className="text-muted">
                                            Quy ƒë·ªãnh s·ªë ƒëi·ªÉm d·ª´ng trung gian t·ªëi ƒëa ƒë∆∞·ª£c ph√©p cho m·ªói chuy·∫øn bay
                                        </Form.Text>
                                    </Form.Group>
                                </Col>

                                <Col md={6}>
                                    <Form.Group>
                                        <Form.Label className="fw-bold">Th·ªùi gian bay t·ªëi thi·ªÉu (ph√∫t)</Form.Label>
                                        <Form.Control
                                            type="number"
                                            min="30"
                                            max="1440"
                                            readOnly={readOnly}
                                            disabled={readOnly}
                                            {...register('minFlightDuration', {
                                                required: !readOnly && 'Th·ªùi gian bay t·ªëi thi·ªÉu l√† b·∫Øt bu·ªôc',
                                                min: { value: 30, message: 'Th·ªùi gian t·ªëi thi·ªÉu l√† 30 ph√∫t' },
                                                max: { value: 1440, message: 'Th·ªùi gian t·ªëi ƒëa l√† 24 gi·ªù (1440 ph√∫t)' },
                                                valueAsNumber: true
                                            })}
                                            isInvalid={!readOnly && !!errors.minFlightDuration}
                                        />
                                        {!readOnly && (
                                            <Form.Control.Feedback type="invalid">
                                                {errors.minFlightDuration?.message}
                                            </Form.Control.Feedback>
                                        )}
                                        <Form.Text className="text-muted">
                                            Quy ƒë·ªãnh th·ªùi gian bay t·ªëi thi·ªÉu ƒë∆∞·ª£c ph√©p cho m·ªói chuy·∫øn
                                        </Form.Text>
                                    </Form.Group>
                                </Col>
                            </Row>
                        </div>

                        {/* Layover Settings Section */}
                        <div className="mb-5 pb-4 border-bottom">
                            <h5 className="text-primary mb-4">
                                <span className="me-2">üîÑ</span>
                                Quy ƒë·ªãnh v·ªÅ th·ªùi gian d·ª´ng ch√¢n
                            </h5>

                            <Row className="g-4">
                                <Col md={6}>
                                    <Form.Group>
                                        <Form.Label className="fw-bold">Th·ªùi gian d·ª´ng ch√¢n t·ªëi thi·ªÉu (ph√∫t)</Form.Label>
                                        <Form.Control
                                            type="number"
                                            min="30"
                                            max="720"
                                            readOnly={readOnly}
                                            disabled={readOnly}
                                            {...register('minLayoverDuration', {
                                                required: !readOnly && 'Th·ªùi gian d·ª´ng ch√¢n t·ªëi thi·ªÉu l√† b·∫Øt bu·ªôc',
                                                min: { value: 30, message: 'Th·ªùi gian d·ª´ng ch√¢n t·ªëi thi·ªÉu l√† 30 ph√∫t' },
                                                max: { value: 720, message: 'Th·ªùi gian d·ª´ng ch√¢n t·ªëi ƒëa l√† 12 gi·ªù (720 ph√∫t)' },
                                                valueAsNumber: true
                                            })}
                                            isInvalid={!readOnly && !!errors.minLayoverDuration}
                                        />
                                        {!readOnly && (
                                            <Form.Control.Feedback type="invalid">
                                                {errors.minLayoverDuration?.message}
                                            </Form.Control.Feedback>
                                        )}
                                        <Form.Text className="text-muted">
                                            Quy ƒë·ªãnh th·ªùi gian d·ª´ng ch√¢n t·ªëi thi·ªÉu c·∫ßn thi·∫øt gi·ªØa c√°c chuy·∫øn bay k·∫øt n·ªëi
                                        </Form.Text>
                                    </Form.Group>
                                </Col>

                                <Col md={6}>
                                    <Form.Group>
                                        <Form.Label className="fw-bold">Th·ªùi gian d·ª´ng ch√¢n t·ªëi ƒëa (ph√∫t)</Form.Label>
                                        <Form.Control
                                            type="number"
                                            min="60"
                                            max="1440"
                                            readOnly={readOnly}
                                            disabled={readOnly}
                                            {...register('maxLayoverDuration', {
                                                required: !readOnly && 'Th·ªùi gian d·ª´ng ch√¢n t·ªëi ƒëa l√† b·∫Øt bu·ªôc',
                                                min: { value: 60, message: 'Th·ªùi gian t·ªëi thi·ªÉu l√† 60 ph√∫t' },
                                                max: { value: 1440, message: 'Th·ªùi gian t·ªëi ƒëa l√† 24 gi·ªù (1440 ph√∫t)' },
                                                valueAsNumber: true
                                            })}
                                            isInvalid={!readOnly && !!errors.maxLayoverDuration}
                                        />
                                        {!readOnly && (
                                            <Form.Control.Feedback type="invalid">
                                                {errors.maxLayoverDuration?.message}
                                            </Form.Control.Feedback>
                                        )}
                                        <Form.Text className="text-muted">
                                            Quy ƒë·ªãnh th·ªùi gian d·ª´ng ch√¢n t·ªëi ƒëa ƒë∆∞·ª£c ph√©p
                                        </Form.Text>
                                    </Form.Group>
                                </Col>
                            </Row>
                        </div>

                        {/* Booking Rules Section */}
                        <div className="mb-4">
                            <h5 className="text-primary mb-4">
                                <span className="me-2">üìÖ</span>
                                Quy ƒë·ªãnh v·ªÅ ƒë·∫∑t v√© v√† thanh to√°n
                            </h5>

                            <Row className="g-4">
                                <Col md={6}>
                                    <Form.Group>
                                        <Form.Label className="fw-bold">Th·ªùi gian ƒë·∫∑t v√© tr∆∞·ªõc t·ªëi thi·ªÉu (ng√†y)</Form.Label>
                                        <Form.Control
                                            type="number"
                                            min="0"
                                            readOnly={readOnly}
                                            disabled={readOnly}
                                            {...register('minBookingInAdvanceDuration', {
                                                required: !readOnly && 'Th·ªùi gian ƒë·∫∑t v√© tr∆∞·ªõc t·ªëi thi·ªÉu l√† b·∫Øt bu·ªôc',
                                                min: { value: 0, message: 'Th·ªùi gian kh√¥ng ƒë∆∞·ª£c √¢m' },
                                                valueAsNumber: true
                                            })}
                                            isInvalid={!readOnly && !!errors.minBookingInAdvanceDuration}
                                        />
                                        {!readOnly && (
                                            <Form.Control.Feedback type="invalid">
                                                {errors.minBookingInAdvanceDuration?.message}
                                            </Form.Control.Feedback>
                                        )}
                                        <Form.Text className="text-muted">
                                            Quy ƒë·ªãnh s·ªë ng√†y t·ªëi thi·ªÉu kh√°ch h√†ng ph·∫£i ƒë·∫∑t v√© tr∆∞·ªõc khi kh·ªüi h√†nh
                                        </Form.Text>
                                    </Form.Group>
                                </Col>

                                <Col md={6}>
                                    <Form.Group>
                                        <Form.Label className="fw-bold">Th·ªùi gian gi·ªØ ch·ªó t·ªëi ƒëa (gi·ªù)</Form.Label>
                                        <Form.Control
                                            type="number"
                                            min="0"
                                            max="720"
                                            readOnly={readOnly}
                                            disabled={readOnly}
                                            {...register('maxBookingHoldDuration', {
                                                required: !readOnly && 'Th·ªùi gian gi·ªØ ch·ªó t·ªëi ƒëa l√† b·∫Øt bu·ªôc',
                                                max: { value: 720, message: 'Th·ªùi gian gi·ªØ ch·ªó t·ªëi ƒëa l√† 720 gi·ªù (30 ng√†y)' },
                                                valueAsNumber: true
                                            })}
                                            isInvalid={!readOnly && !!errors.maxBookingHoldDuration}
                                        />
                                        {!readOnly && (
                                            <Form.Control.Feedback type="invalid">
                                                {errors.maxBookingHoldDuration?.message}
                                            </Form.Control.Feedback>
                                        )}
                                        <Form.Text className="text-muted">
                                            Quy ƒë·ªãnh th·ªùi gian t·ªëi ƒëa h·ªá th·ªëng gi·ªØ ch·ªó tr∆∞·ªõc khi y√™u c·∫ßu thanh to√°n
                                        </Form.Text>
                                    </Form.Group>
                                </Col>
                            </Row>
                        </div>

                        {!readOnly && (
                            <div className="d-flex justify-content-center mt-5">
                                <Button type="submit" variant="primary" disabled={saving} size="lg" className="px-5">
                                    {saving ? (
                                        <>
                                            <Spinner
                                                as="span"
                                                animation="border"
                                                size="sm"
                                                role="status"
                                                aria-hidden="true"
                                                className="me-2"
                                            />
                                            ƒêang l∆∞u quy ƒë·ªãnh...
                                        </>
                                    ) : (
                                        <>
                                            <i className="bi bi-check-circle me-2"></i>
                                            L∆∞u quy ƒë·ªãnh h·ªá th·ªëng
                                        </>
                                    )}
                                </Button>
                            </div>
                        )}
                    </Form>
                </Card.Body>
            </Card>

            {/* Additional Information Card */}
            <Card className="mt-4">
                <Card.Body className="bg-light">
                    <h6 className="text-primary mb-3">
                        <i className="bi bi-info-circle me-2"></i>
                        Th√¥ng tin quan tr·ªçng v·ªÅ quy ƒë·ªãnh
                    </h6>
                    <Row>
                        <Col md={6}>
                            <ul className="small text-muted mb-0">
                                {readOnly ? (
                                    <>
                                        <li>ƒêang xem quy ƒë·ªãnh hi·ªán t·∫°i c·ªßa h·ªá th·ªëng</li>
                                        <li>Li√™n h·ªá qu·∫£n tr·ªã vi√™n ƒë·ªÉ thay ƒë·ªïi quy ƒë·ªãnh</li>
                                        <li>Th·ªùi gian t√≠nh b·∫±ng ph√∫t (1 gi·ªù = 60 ph√∫t)</li>
                                    </>
                                ) : (
                                    <>
                                        <li>T·∫•t c·∫£ quy ƒë·ªãnh √°p d·ª•ng ngay sau khi l∆∞u</li>
                                        <li>Thay ƒë·ªïi quy ƒë·ªãnh c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn ƒë·∫∑t v√© hi·ªán t·∫°i</li>
                                        <li>Th·ªùi gian t√≠nh b·∫±ng ph√∫t (1 gi·ªù = 60 ph√∫t)</li>
                                    </>
                                )}
                            </ul>
                        </Col>
                        <Col md={6}>
                            <ul className="small text-muted mb-0">
                                {readOnly ? (
                                    <>
                                        <li>Ch·∫ø ƒë·ªô ch·ªâ xem - kh√¥ng th·ªÉ ch·ªânh s·ª≠a</li>
                                        <li>M·ªçi thay ƒë·ªïi ph·∫£i ƒë∆∞·ª£c ph√™ duy·ªát</li>
                                        <li>Li√™n h·ªá IT n·∫øu c·∫ßn h·ªó tr·ª£</li>
                                    </>
                                ) : (
                                    <>
                                        <li>Ch·ªâ qu·∫£n tr·ªã vi√™n v√† nh√¢n vi√™n d·ªãch v·ª• m·ªõi c√≥ quy·ªÅn thay ƒë·ªïi</li>
                                        <li>M·ªçi thay ƒë·ªïi ƒë∆∞·ª£c ghi l·∫°i trong h·ªá th·ªëng</li>
                                        <li>Li√™n h·ªá IT n·∫øu g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t</li>
                                    </>
                                )}
                            </ul>
                        </Col>
                    </Row>
                </Card.Body>
            </Card>
        </Container>
    );
};

export default ParameterSettings;